{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\src\\\\Component\\\\Streams\\\\StreamEdit.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\"; // It is essential to consider that we do make user of two major context in this component in order\n// to select user's id and match against our store. Redux keeps the ID of the users in the state, and the\n// Router library that we have installed earlier, keeps track of the variable ID that user clicked on.\n// then we can extract that ID from the props created by Router library, and then match it agasint the recrod\n// in our state, and do the magic :)\n\nclass StreamEdit extends React.Component {\n  componentDidMount() {}\n\n  render() {\n    console.log(props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, \" Stream Edit \");\n  }\n\n} // the trick is that, you can always have a second argument in mapStateToProps called 'ownProps' that will call\n// the props from your component, this way you can get the data from the props and check it agains your data in the store.\n\n\nconst mapStateToProps = (state, ownProps) => {\n  // this will select the appropriate stream\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps)(StreamEdit);","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\Component\\Streams\\StreamEdit.js"],"names":["React","connect","StreamEdit","Component","componentDidMount","render","console","log","props","mapStateToProps","state","ownProps","stream","streams","match","params","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAN,SAAyBF,KAAK,CAACG,SAA/B,CAAyC;AACvCC,EAAAA,iBAAiB,GAAG,CAAE;;AACtBC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACD;;AALsC,C,CAQzC;AACA;;;AACA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C;AACA,SAAO;AAAEC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAcF,QAAQ,CAACG,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACD,CAHD;;AAKA,eAAef,OAAO,CAACQ,eAAD,CAAP,CAAyBP,UAAzB,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// It is essential to consider that we do make user of two major context in this component in order\r\n// to select user's id and match against our store. Redux keeps the ID of the users in the state, and the\r\n// Router library that we have installed earlier, keeps track of the variable ID that user clicked on.\r\n// then we can extract that ID from the props created by Router library, and then match it agasint the recrod\r\n// in our state, and do the magic :)\r\n\r\nclass StreamEdit extends React.Component {\r\n  componentDidMount() {}\r\n  render() {\r\n    console.log(props);\r\n    return <div> Stream Edit </div>;\r\n  }\r\n}\r\n\r\n// the trick is that, you can always have a second argument in mapStateToProps called 'ownProps' that will call\r\n// the props from your component, this way you can get the data from the props and check it agains your data in the store.\r\nconst mapStateToProps = (state, ownProps) => {\r\n  // this will select the appropriate stream\r\n  return { stream: state.streams[ownProps.match.params.id] };\r\n};\r\n\r\nexport default connect(mapStateToProps)(StreamEdit);\r\n"]},"metadata":{},"sourceType":"module"}