{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from \"./types\";\nimport streams from \"../apis/streams\";\nimport history from \"../history\"; // getting user from google and setting as the action payload\n\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n}; // action for signing out, this will embark on a reducer that will update the store eventually\n\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const createStream = formValues => {\n  // making use of redux-thunk for async request\n  return async (dispatch, getState) => {\n    // getState is another function of reduxThunk that allows you to dissect particular poritons of the state\n    const userId = getState().auth.userId; //http://localhost:3001/streams\n\n    const response = await streams.post(\"/streams\", _objectSpread({}, formValues, {\n      userId\n    })); // manually dispatching to reducers, remember reponse.data is necessary, because data is what we are looking for! there are other\n    // data available too on the request\n\n    dispatch({\n      type: CREATE_STREAM,\n      payload: response.data\n    }); // programmatic nagivation to get the user back to the root route\n\n    history.push(\"/\");\n  };\n}; // getting all the streams\n\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(\"/streams\");\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n}; // getting a specific stream\n\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(\"/streams/\".concat(id));\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n}; // editing a stream\n\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.put(\"/streams/\".concat(id), formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  }); // programmatic navigation to get user back to the root route\n\n  history.push(\"/\");\n}; // deleting a stream\n\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(\"/streams/\".concat(id));\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n};","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\actions\\index.js"],"names":["SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","streams","history","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","push","fetchStreams","get","fetchStream","id","editStream","put","deleteStream","delete"],"mappings":";AAAA,SACEA,OADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,YALF,EAMEC,aANF,EAOEC,WAPF,QAQO,SARP;AASA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB,C,CAEA;;AACA,OAAO,MAAMC,MAAM,GAAGC,MAAM,IAAI;AAC9B,SAAO;AACLC,IAAAA,IAAI,EAAEX,OADD;AAELY,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAO;AACLF,IAAAA,IAAI,EAAEV;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMa,YAAY,GAAGC,UAAU,IAAI;AACxC;AACA,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC;AADmC,UAE3BP,MAF2B,GAEhBO,QAAQ,GAAGC,IAFK,CAE3BR,MAF2B,EAGnC;;AACA,UAAMS,QAAQ,GAAG,MAAMZ,OAAO,CAACa,IAAR,CAAa,UAAb,oBAA8BL,UAA9B;AAA0CL,MAAAA;AAA1C,OAAvB,CAJmC,CAKnC;AACA;;AACAM,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAET,aAAR;AAAuBU,MAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,KAAD,CAAR,CAPmC,CAQnC;;AACAb,IAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACD,GAVD;AAWD,CAbM,C,CAeP;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMP,QAAN,IAAkB;AAClD,QAAMG,QAAQ,GAAG,MAAMZ,OAAO,CAACiB,GAAR,CAAY,UAAZ,CAAvB;AACAR,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAER,aAAR;AAAuBS,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACD,CAHM,C,CAKP;;AACA,OAAO,MAAMI,WAAW,GAAGC,EAAE,IAAI,MAAMV,QAAN,IAAkB;AACjD,QAAMG,QAAQ,GAAG,MAAMZ,OAAO,CAACiB,GAAR,oBAAwBE,EAAxB,EAAvB;AACAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEP,YAAR;AAAsBQ,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACD,CAHM,C,CAKP;;AACA,OAAO,MAAMM,UAAU,GAAG,CAACD,EAAD,EAAKX,UAAL,KAAoB,MAAMC,QAAN,IAAkB;AAC9D,QAAMG,QAAQ,GAAG,MAAMZ,OAAO,CAACqB,GAAR,oBAAwBF,EAAxB,GAA8BX,UAA9B,CAAvB;AACAC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEL,WAAR;AAAqBM,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAvC,GAAD,CAAR,CAF8D,CAG9D;;AACAb,EAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACD,CALM,C,CAOP;;AACA,OAAO,MAAMO,YAAY,GAAGH,EAAE,IAAI,MAAMV,QAAN,IAAkB;AAClD,QAAMT,OAAO,CAACuB,MAAR,oBAA2BJ,EAA3B,EAAN;AACAV,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEN,aAAR;AAAuBO,IAAAA,OAAO,EAAEc;AAAhC,GAAD,CAAR;AACD,CAHM","sourcesContent":["import {\r\n  SIGN_IN,\r\n  SIGN_OUT,\r\n  CREATE_STREAM,\r\n  FETCH_STREAMS,\r\n  FETCH_STREAM,\r\n  DELETE_STREAM,\r\n  EDIT_STREAM\r\n} from \"./types\";\r\nimport streams from \"../apis/streams\";\r\nimport history from \"../history\";\r\n\r\n// getting user from google and setting as the action payload\r\nexport const signIn = userId => {\r\n  return {\r\n    type: SIGN_IN,\r\n    payload: userId\r\n  };\r\n};\r\n\r\n// action for signing out, this will embark on a reducer that will update the store eventually\r\nexport const signOut = () => {\r\n  return {\r\n    type: SIGN_OUT\r\n  };\r\n};\r\n\r\nexport const createStream = formValues => {\r\n  // making use of redux-thunk for async request\r\n  return async (dispatch, getState) => {\r\n    // getState is another function of reduxThunk that allows you to dissect particular poritons of the state\r\n    const { userId } = getState().auth;\r\n    //http://localhost:3001/streams\r\n    const response = await streams.post(\"/streams\", { ...formValues, userId });\r\n    // manually dispatching to reducers, remember reponse.data is necessary, because data is what we are looking for! there are other\r\n    // data available too on the request\r\n    dispatch({ type: CREATE_STREAM, payload: response.data });\r\n    // programmatic nagivation to get the user back to the root route\r\n    history.push(\"/\");\r\n  };\r\n};\r\n\r\n// getting all the streams\r\nexport const fetchStreams = () => async dispatch => {\r\n  const response = await streams.get(\"/streams\");\r\n  dispatch({ type: FETCH_STREAMS, payload: response.data });\r\n};\r\n\r\n// getting a specific stream\r\nexport const fetchStream = id => async dispatch => {\r\n  const response = await streams.get(`/streams/${id}`);\r\n  dispatch({ type: FETCH_STREAM, payload: response.data });\r\n};\r\n\r\n// editing a stream\r\nexport const editStream = (id, formValues) => async dispatch => {\r\n  const response = await streams.put(`/streams/${id}`, formValues);\r\n  dispatch({ type: EDIT_STREAM, payload: response.data });\r\n  // programmatic navigation to get user back to the root route\r\n  history.push(\"/\");\r\n};\r\n\r\n// deleting a stream\r\nexport const deleteStream = id => async dispatch => {\r\n  await streams.delete(`/streams/${id}`);\r\n  dispatch({ type: DELETE_STREAM, payload: id });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}