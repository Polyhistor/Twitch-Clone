{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\src\\\\Component\\\\Streams\\\\StreamDelete.js\";\nimport React from \"react\";\nimport Modal from \"../Modal\";\nimport history from \"../../history\";\n\nclass StreamDelete extends React.Component {\n  // if you ever wondered how we can pass JSX as props down the chain, this is the way! create a varibale, assign your JSX,\n  // and call it to the prop\n  renderActions() {\n    return (// in order to get around the need of REACT for enclosing parent divs which may break our UI, we make user of the\n      // magical fragments. Not onl Fragments are invisible, but they let us have siblings elements together without any\n      // broken UI. Tadaaa :)\n      React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"ui button negative\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, \"Delete\"), React.createElement(\"button\", {\n        className: \"ui button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, \"Cancel\"))\n    );\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"StreamDelete\", React.createElement(Modal // in order to make our Modal reuseable, we are passing the elements as props from parent to child\n    , {\n      title: \"Delete Stream\",\n      content: \"Are you sure you'd like to delete this stream?\",\n      actions: this.renderActions,\n      onDismiss: () => history.push(\"/\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default StreamDelete;","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\Component\\Streams\\StreamDelete.js"],"names":["React","Modal","history","StreamDelete","Component","renderActions","render","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AACzC;AACA;AACAC,EAAAA,aAAa,GAAG;AACd,WACE;AACA;AACA;AACA,0BAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,oBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAJF;AASD;;AACDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEE,oBAAC,KAAD,CACE;AADF;AAEE,MAAA,KAAK,EAAC,eAFR;AAGE,MAAA,OAAO,EAAC,gDAHV;AAIE,MAAA,OAAO,EAAE,KAAKD,aAJhB;AAKE,MAAA,SAAS,EAAE,MAAMH,OAAO,CAACK,IAAR,CAAa,GAAb,CALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAYD;;AA3BwC;;AA8B3C,eAAeJ,YAAf","sourcesContent":["import React from \"react\";\r\nimport Modal from \"../Modal\";\r\nimport history from \"../../history\";\r\n\r\nclass StreamDelete extends React.Component {\r\n  // if you ever wondered how we can pass JSX as props down the chain, this is the way! create a varibale, assign your JSX,\r\n  // and call it to the prop\r\n  renderActions() {\r\n    return (\r\n      // in order to get around the need of REACT for enclosing parent divs which may break our UI, we make user of the\r\n      // magical fragments. Not onl Fragments are invisible, but they let us have siblings elements together without any\r\n      // broken UI. Tadaaa :)\r\n      <React.Fragment>\r\n        <button className=\"ui button negative\">Delete</button>\r\n        <button className=\"ui button\">Cancel</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        StreamDelete\r\n        <Modal\r\n          // in order to make our Modal reuseable, we are passing the elements as props from parent to child\r\n          title=\"Delete Stream\"\r\n          content=\"Are you sure you'd like to delete this stream?\"\r\n          actions={this.renderActions}\r\n          onDismiss={() => history.push(\"/\")}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StreamDelete;\r\n"]},"metadata":{},"sourceType":"module"}