{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\src\\\\Component\\\\GoogleAuth.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { signIn, signOut } from '../actions';\n\nclass GoogleAuth extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSignInClick = () => {\n      this.auth.signIn();\n    };\n\n    this.onSignOutClick = () => {\n      this.auth.signOut();\n    };\n\n    this.onAuthChange = isSignedIn => {\n      // updating state via action creators\n      if (isSignedIn === true) {\n        this.props.signIn();\n      } else {\n        this.props.signOut();\n      }\n    };\n  }\n\n  // loading Google API on load\n  componentDidMount() {\n    // load the API call\n    window.gapi.load('client:auth2', () => {\n      // initializing the client\n      window.gapi.client.init({\n        // setting our google ID\n        clientId: '373814302015-im2k9grglutk1rlh743q5ria6pikoa5s.apps.googleusercontent.com',\n        // choose what scope we need - in this case we just need the email\n        scope: 'email'\n      }).then(() => {\n        // once we got the promis and everything is loaded, we load them to internal variables\n        this.auth = window.gapi.auth2.getAuthInstance(); // checking out if the user has signed in or not\n\n        this.onAuthChange(this.auth.isSignedIn.get()); // adding an event listener on isSigend method\n\n        this.auth.isSignedIn.listen(this.onAuthChange);\n      });\n    });\n  }\n\n  renderAuthButton() {\n    if (this.props.state.isSignedIn === null) {\n      return null;\n    } else if (this.props.isSignedIn) {\n      return React.createElement(\"button\", {\n        onClick: this.onSignOutClick,\n        className: \"ui red google button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"google icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Sign out\"));\n    } else {\n      return React.createElement(\"button\", {\n        onClick: this.onSignInClick,\n        className: \"ui red google button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"google icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Sign in with google\"));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.renderAuthButton());\n  }\n\n} // bringing state from the redux and connecting it to the state object\n\n\nconst mapStateToProps = state => {\n  return {\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, // mapping state to props\n{\n  signIn,\n  signOut\n}) // mapping dispatch to props\n(GoogleAuth);","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\Component\\GoogleAuth.js"],"names":["React","connect","signIn","signOut","GoogleAuth","Component","onSignInClick","auth","onSignOutClick","onAuthChange","isSignedIn","props","componentDidMount","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","get","listen","renderAuthButton","state","render","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,YAAhC;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAsBrCC,aAtBqC,GAsBrB,MAAM;AAClB,WAAKC,IAAL,CAAUL,MAAV;AACH,KAxBoC;;AAAA,SA0BrCM,cA1BqC,GA0BpB,MAAM;AACnB,WAAKD,IAAL,CAAUJ,OAAV;AACH,KA5BoC;;AAAA,SA8BrCM,YA9BqC,GA8BtBC,UAAU,IAAI;AACzB;AACA,UAAIA,UAAU,KAAK,IAAnB,EAAyB;AACrB,aAAKC,KAAL,CAAWT,MAAX;AACH,OAFD,MAEO;AACH,aAAKS,KAAL,CAAWR,OAAX;AACH;AACJ,KArCoC;AAAA;;AACrC;AACAS,EAAAA,iBAAiB,GAAG;AAChB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiC,MAAI;AACjC;AACAF,MAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CAAmBC,IAAnB,CAAwB;AACpB;AACAC,QAAAA,QAAQ,EAAE,0EAFU;AAGpB;AACAC,QAAAA,KAAK,EAAE;AAJa,OAAxB,EAKGC,IALH,CAKQ,MAAM;AACV;AACA,aAAKb,IAAL,GAAYM,MAAM,CAACC,IAAP,CAAYO,KAAZ,CAAkBC,eAAlB,EAAZ,CAFU,CAGV;;AACA,aAAKb,YAAL,CAAkB,KAAKF,IAAL,CAAUG,UAAV,CAAqBa,GAArB,EAAlB,EAJU,CAKV;;AACA,aAAKhB,IAAL,CAAUG,UAAV,CAAqBc,MAArB,CAA4B,KAAKf,YAAjC;AACH,OAZD;AAaH,KAfD;AAgBH;;AAmBDgB,EAAAA,gBAAgB,GAAG;AACf,QAAI,KAAKd,KAAL,CAAWe,KAAX,CAAiBhB,UAAjB,KAAgC,IAApC,EAA0C;AACtC,aAAO,IAAP;AACH,KAFD,MAEO,IAAI,KAAKC,KAAL,CAAWD,UAAf,EAA2B;AAC9B,aACI;AAAQ,QAAA,OAAO,EAAE,KAAKF,cAAtB;AAAsC,QAAA,SAAS,EAAC,sBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ;AAOH,KARM,MAQA;AACH,aACI;AAAQ,QAAA,OAAO,EAAE,KAAKF,aAAtB;AAAoC,QAAA,SAAS,EAAC,sBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADJ,CADJ;AAOH;AACJ;;AAEDqB,EAAAA,MAAM,GAAE;AACJ,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKF,gBAAL,EAAN,CAAP;AACH;;AA/DoC,C,CAkEzC;;;AACA,MAAMG,eAAe,GAAGF,KAAK,IAAI;AAC7B,SAAO;AAAEhB,IAAAA,UAAU,EAAEgB,KAAK,CAACnB,IAAN,CAAWG;AAAzB,GAAP;AACH,CAFD;;AAIA,eAAeT,OAAO,CAAC2B,eAAD,EAAkB;AAChC;AAAC1B,EAAAA,MAAD;AAASC,EAAAA;AAAT,CADc,CAAP,CACa;AADb,CAENC,UAFM,CAAf","sourcesContent":["import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { signIn, signOut } from '../actions'\r\n\r\nclass GoogleAuth extends React.Component {\r\n    // loading Google API on load\r\n    componentDidMount() {\r\n        // load the API call\r\n        window.gapi.load('client:auth2', ()=>{\r\n            // initializing the client\r\n            window.gapi.client.init({\r\n                // setting our google ID\r\n                clientId: '373814302015-im2k9grglutk1rlh743q5ria6pikoa5s.apps.googleusercontent.com',\r\n                // choose what scope we need - in this case we just need the email\r\n                scope: 'email'\r\n            }).then(() => {\r\n                // once we got the promis and everything is loaded, we load them to internal variables\r\n                this.auth = window.gapi.auth2.getAuthInstance()\r\n                // checking out if the user has signed in or not\r\n                this.onAuthChange(this.auth.isSignedIn.get())\r\n                // adding an event listener on isSigend method\r\n                this.auth.isSignedIn.listen(this.onAuthChange)\r\n            })\r\n        })\r\n    }\r\n\r\n    onSignInClick = () => {\r\n        this.auth.signIn()\r\n    }\r\n\r\n    onSignOutClick = () => {\r\n        this.auth.signOut()\r\n    }\r\n    \r\n    onAuthChange = isSignedIn => {\r\n        // updating state via action creators\r\n        if (isSignedIn === true) {\r\n            this.props.signIn()\r\n        } else {\r\n            this.props.signOut()\r\n        }\r\n    }\r\n\r\n    renderAuthButton() {\r\n        if (this.props.state.isSignedIn === null) {\r\n            return null\r\n        } else if (this.props.isSignedIn) {\r\n            return (\r\n                <button onClick={this.onSignOutClick} className=\"ui red google button\">\r\n                    <i className=\"google icon\">\r\n                        Sign out\r\n                    </i>\r\n                </button>\r\n            )\r\n        } else {\r\n            return (\r\n                <button onClick={this.onSignInClick}className=\"ui red google button\">\r\n                    <i className=\"google icon\">\r\n                        Sign in with google\r\n                    </i>\r\n                </button>\r\n            )\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return <div>{this.renderAuthButton()}</div>\r\n    }\r\n}\r\n\r\n// bringing state from the redux and connecting it to the state object\r\nconst mapStateToProps = state => {\r\n    return { isSignedIn: state.auth.isSignedIn }\r\n}\r\n\r\nexport default connect(mapStateToProps, // mapping state to props\r\n        {signIn, signOut})  // mapping dispatch to props\r\n        (GoogleAuth)"]},"metadata":{},"sourceType":"module"}