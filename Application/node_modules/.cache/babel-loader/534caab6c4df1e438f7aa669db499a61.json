{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { SIGN_IN, SIGN_OUT } from '../actions/types'; // initializing a state value, because that's a must in Redux\n\nconst INITIAL_STATE = {\n  isSignedIn: null,\n  userId: null\n};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SIGN_IN:\n      // here we make sure that once user is logged in, we change our 'isSignedin' in the store to true, and we also pass the user ID!\n      return _objectSpread({}, state, {\n        isSignedIn: true,\n        userId: action.payload\n      });\n\n    case SIGN_OUT:\n      // we make sure that once user logs out, we mark 'isSignedin' to false, and we clear the user ID.\n      return _objectSpread({}, state, {\n        isSignedIn: false,\n        userId: null\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\reducers\\AuthReducer.js"],"names":["SIGN_IN","SIGN_OUT","INITIAL_STATE","isSignedIn","userId","state","action","type","payload"],"mappings":";AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,kBAAlC,C,CAEA;;AACA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,UAAU,EAAE,IADM;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAAtB;AAKA,gBAAe,CAACC,KAAK,GAAGH,aAAT,EAAwBI,MAAxB,KAAmC;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,OAAL;AACI;AACA,+BAAYK,KAAZ;AAAmBF,QAAAA,UAAU,EAAE,IAA/B;AAAqCC,QAAAA,MAAM,EAAEE,MAAM,CAACE;AAApD;;AACJ,SAAKP,QAAL;AACI;AACA,+BAAYI,KAAZ;AAAmBF,QAAAA,UAAU,EAAE,KAA/B;AAAsCC,QAAAA,MAAM,EAAE;AAA9C;;AACJ;AACI,aAAOC,KAAP;AARR;AAUH,CAXD","sourcesContent":["import { SIGN_IN, SIGN_OUT } from '../actions/types'\r\n\r\n// initializing a state value, because that's a must in Redux\r\nconst INITIAL_STATE = {\r\n    isSignedIn: null,\r\n    userId: null\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case SIGN_IN:\r\n            // here we make sure that once user is logged in, we change our 'isSignedin' in the store to true, and we also pass the user ID!\r\n            return { ...state, isSignedIn: true, userId: action.payload }\r\n        case SIGN_OUT:\r\n            // we make sure that once user logs out, we mark 'isSignedin' to false, and we clear the user ID.\r\n            return { ...state, isSignedIn: false, userId: null }\r\n        default:\r\n            return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}