{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\src\\\\Component\\\\Streams\\\\StreamList.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { fetchStreams } from \"../../actions\";\n\nclass StreamList extends React.Component {\n  // the best place to load the inital state from an API\n  componentDidMount() {\n    this.props.fetchStreams();\n  } // helper method to see if the buttons should be visible to users\n\n\n  renderAdmin(stream) {\n    if (stream.userId === this.props.currentUserId) {\n      return React.createElement(\"div\", {\n        className: \"right floated content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/streams/edit/\".concat(stream.id),\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"Edit\"), React.createElement(Link, {\n        to: \"/streams/delete/\".concat(stream.id),\n        className: \"ui button negative\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"Delete\"));\n    }\n  }\n\n  renderList() {\n    // iterating over the state and pringint out streams\n    return this.props.streams.map(stream => {\n      return React.createElement(\"div\", {\n        className: \"item\",\n        key: stream.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, this.renderAdmin(stream), React.createElement(\"i\", {\n        className: \"large middle aligned icon camera\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(Link, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, stream.title), React.createElement(\"div\", {\n        className: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, stream.description)));\n    });\n  } // our create stream function using auth2 isSignedIn() method\n\n\n  renderCreate() {\n    if (this.props.isSignedIn) {\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/streams/new\",\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Create Stream\"));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Streams\"), React.createElement(\"div\", {\n      className: \"ui celled list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.renderList()), this.renderCreate());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    streams: Object.values(state.streams),\n    // we need to make sure that the component knows the userId, here we are extracting the userId from the store\n    currentUserId: state.auth.userId,\n    // we need isSignedIn for validation. This validation will be used to conditionally show create Stream\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, // if you do have a named export, make sure you apply the braces in your mapDispatchToProps too\n{\n  fetchStreams\n})(StreamList);","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\Component\\Streams\\StreamList.js"],"names":["React","connect","Link","fetchStreams","StreamList","Component","componentDidMount","props","renderAdmin","stream","userId","currentUserId","id","renderList","streams","map","title","description","renderCreate","isSignedIn","textAlign","render","mapStateToProps","state","Object","values","auth"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { fetchStreams } from \"../../actions\";\r\n\r\nclass StreamList extends React.Component {\r\n  // the best place to load the inital state from an API\r\n  componentDidMount() {\r\n    this.props.fetchStreams();\r\n  }\r\n\r\n  // helper method to see if the buttons should be visible to users\r\n  renderAdmin(stream) {\r\n    if (stream.userId === this.props.currentUserId) {\r\n      return (\r\n        <div className=\"right floated content\">\r\n          {/* we are doing URL based selection here for the edit, and the ID will be the variable that's added\r\n          to the end of URL */}\r\n          <Link to={`/streams/edit/${stream.id}`} className=\"ui button primary\">\r\n            Edit\r\n          </Link>\r\n          <Link\r\n            to={`/streams/delete/${stream.id}`}\r\n            className=\"ui button negative\"\r\n          >\r\n            Delete\r\n          </Link>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  renderList() {\r\n    // iterating over the state and pringint out streams\r\n    return this.props.streams.map(stream => {\r\n      return (\r\n        <div className=\"item\" key={stream.id}>\r\n          {/* #1 in here helper function will be called with the given stream we are iterating over,\r\n          checks if the ID is the same, and shows contents accordingly */}\r\n          {/* #2 renderAdmin is being called merely for the purposes of better styling */}\r\n          {this.renderAdmin(stream)}\r\n          <i className=\"large middle aligned icon camera\" />\r\n          <div className=\"content\">\r\n            <Link>{stream.title}</Link>\r\n            <div className=\"description\">{stream.description}</div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  // our create stream function using auth2 isSignedIn() method\r\n  renderCreate() {\r\n    if (this.props.isSignedIn) {\r\n      return (\r\n        <div style={{ textAlign: \"right\" }}>\r\n          <Link to=\"/streams/new\" className=\"ui button primary\">\r\n            Create Stream\r\n          </Link>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Streams</h2>\r\n        <div className=\"ui celled list\">{this.renderList()}</div>\r\n        {this.renderCreate()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    streams: Object.values(state.streams),\r\n    // we need to make sure that the component knows the userId, here we are extracting the userId from the store\r\n    currentUserId: state.auth.userId,\r\n    // we need isSignedIn for validation. This validation will be used to conditionally show create Stream\r\n    isSignedIn: state.auth.isSignedIn\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  // if you do have a named export, make sure you apply the braces in your mapDispatchToProps too\r\n  { fetchStreams }\r\n)(StreamList);\r\n"]},"metadata":{},"sourceType":"module"}