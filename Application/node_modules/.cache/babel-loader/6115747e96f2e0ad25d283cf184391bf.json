{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\src\\\\Component\\\\Streams\\\\StreamEdit.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStream, editStream } from \"../../actions\";\nimport StreamForm from \"./StreamForm\";\nimport _ from \"lodash\"; // It is essential to consider that we do make user of two major context in this component in order\n// to select user's id and match against our store. Redux keeps the ID of the users in the state, and the\n// Router library that we have installed earlier, keeps track of the variable ID that user clicked on.\n// then we can extract that ID from the props created by Router library, and then match it agasint the recrod\n// in our state, and do the magic :)\n\nclass StreamEdit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      this.props.editStream(this.props.match.params.id, formValues);\n    };\n  }\n\n  componentDidMount() {\n    // this match.params.id is being procued and hanled by the Router library, just console it\n    // and you will see the structure of the object\n    this.props.fetchStream(this.props.match.params.id);\n  }\n\n  render() {\n    // the first time render occurs, we still don't have the stream! so make sure, that you do this check or\n    // else you will have the can't get title of undefined error. Just follow my lead my child and you will\n    // be a great JS coder...\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Edit a stream\"), React.createElement(StreamForm // #1 - the first set of paranthesis is to let JSX engine knows that we are doing javascript, the second is for creating an object\n    // #2 - secondly, the object keys that we choose are the ones that we have chosen for our Form component Name attributes\n    // once we set some initialValues, reduxForm will automatically check these keys against the Field names. Tricky, isn't it?\n    // #3 the pick function of the Lodash library takes out what you need from the object\n    , {\n      initialValues: _.pick(this.props.stream, \"title\", \"description\"),\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }));\n  }\n\n} // the trick is that, you can always have a second argument in mapStateToProps called 'ownProps' that will call\n// the props from your component, this way you can get the data from the props and check it agains your data in the store.\n\n\nconst mapStateToProps = (state, ownProps) => {\n  // this will select the appropriate stream\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  editStream\n})(StreamEdit);","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\Component\\Streams\\StreamEdit.js"],"names":["React","connect","fetchStream","editStream","StreamForm","_","StreamEdit","Component","onSubmit","formValues","props","match","params","id","componentDidMount","render","stream","pick","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,CAAP,MAAc,QAAd,C,CACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAN,SAAyBN,KAAK,CAACO,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAOvCC,QAPuC,GAO5BC,UAAU,IAAI;AACvB,WAAKC,KAAL,CAAWP,UAAX,CAAsB,KAAKO,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA9C,EAAkDJ,UAAlD;AACD,KATsC;AAAA;;AACvCK,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA,SAAKJ,KAAL,CAAWR,WAAX,CAAuB,KAAKQ,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACD;;AAMDE,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA,QAAI,CAAC,KAAKL,KAAL,CAAWM,MAAhB,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAIE,oBAAC,UAAD,CACE;AACA;AACA;AACA;AAJF;AAKE,MAAA,aAAa,EAAEX,CAAC,CAACY,IAAF,CAAO,KAAKP,KAAL,CAAWM,MAAlB,EAA0B,OAA1B,EAAmC,aAAnC,CALjB;AAME,MAAA,QAAQ,EAAE,KAAKR,QANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AAeD;;AAjCsC,C,CAoCzC;AACA;;;AACA,MAAMU,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C;AACA,SAAO;AAAEJ,IAAAA,MAAM,EAAEG,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACT,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACD,CAHD;;AAKA,eAAeZ,OAAO,CACpBiB,eADoB,EAEpB;AAAEhB,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAFoB,CAAP,CAGbG,UAHa,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStream, editStream } from \"../../actions\";\r\nimport StreamForm from \"./StreamForm\";\r\nimport _ from \"lodash\";\r\n// It is essential to consider that we do make user of two major context in this component in order\r\n// to select user's id and match against our store. Redux keeps the ID of the users in the state, and the\r\n// Router library that we have installed earlier, keeps track of the variable ID that user clicked on.\r\n// then we can extract that ID from the props created by Router library, and then match it agasint the recrod\r\n// in our state, and do the magic :)\r\n\r\nclass StreamEdit extends React.Component {\r\n  componentDidMount() {\r\n    // this match.params.id is being procued and hanled by the Router library, just console it\r\n    // and you will see the structure of the object\r\n    this.props.fetchStream(this.props.match.params.id);\r\n  }\r\n\r\n  onSubmit = formValues => {\r\n    this.props.editStream(this.props.match.params.id, formValues);\r\n  };\r\n\r\n  render() {\r\n    // the first time render occurs, we still don't have the stream! so make sure, that you do this check or\r\n    // else you will have the can't get title of undefined error. Just follow my lead my child and you will\r\n    // be a great JS coder...\r\n    if (!this.props.stream) {\r\n      return <div>Loading...</div>;\r\n    }\r\n    return (\r\n      <div>\r\n        <h3>Edit a stream</h3>\r\n        {/* // bear in mind that initialValues is a very special property name inherently defined in ReduxForm, we can \r\n        // make use of it in order to set our initial values */}\r\n        <StreamForm\r\n          // #1 - the first set of paranthesis is to let JSX engine knows that we are doing javascript, the second is for creating an object\r\n          // #2 - secondly, the object keys that we choose are the ones that we have chosen for our Form component Name attributes\r\n          // once we set some initialValues, reduxForm will automatically check these keys against the Field names. Tricky, isn't it?\r\n          // #3 the pick function of the Lodash library takes out what you need from the object\r\n          initialValues={_.pick(this.props.stream, \"title\", \"description\")}\r\n          onSubmit={this.onSubmit}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// the trick is that, you can always have a second argument in mapStateToProps called 'ownProps' that will call\r\n// the props from your component, this way you can get the data from the props and check it agains your data in the store.\r\nconst mapStateToProps = (state, ownProps) => {\r\n  // this will select the appropriate stream\r\n  return { stream: state.streams[ownProps.match.params.id] };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchStream, editStream }\r\n)(StreamEdit);\r\n"]},"metadata":{},"sourceType":"module"}