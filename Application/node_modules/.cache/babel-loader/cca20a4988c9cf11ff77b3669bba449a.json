{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\src\\\\Component\\\\Streams\\\\StreamCreate.js\";\nimport React from \"react\"; // let's get a component and a function from the redux-form library\n// bear in mind that Field is a component and that's why it starts with capital\n// whereas reduxForm is just a function, we will use.\n\nimport { Field, reduxForm } from \"redux-form\";\n\nclass StreamCreate extends React.Component {\n  // Field component captures and returns component\n  renderInput({\n    input\n  }) {\n    // we take out all the input properties here\n    return React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }), React.createElement(\"input\", Object.assign({}, input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }));\n  }\n\n} //instead of connect, we use reduxForm, this will add all the form functions into our props\n\n\nexport default reduxForm({\n  // you're gonna name your form here\n  form: \"streamCreate\"\n})(StreamCreate);","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\Component\\Streams\\StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","Component","renderInput","input","render","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AACzC;AACAC,EAAAA,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAY;AACrB;AACA,WACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,+CAAWA,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFF,CADF;AAMD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKF,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD;;AApBwC,C,CAuB3C;;;AACA,eAAeH,SAAS,CAAC;AACvB;AACAM,EAAAA,IAAI,EAAE;AAFiB,CAAD,CAAT,CAGZL,YAHY,CAAf","sourcesContent":["import React from \"react\";\r\n// let's get a component and a function from the redux-form library\r\n// bear in mind that Field is a component and that's why it starts with capital\r\n// whereas reduxForm is just a function, we will use.\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nclass StreamCreate extends React.Component {\r\n  // Field component captures and returns component\r\n  renderInput({ input }) {\r\n    // we take out all the input properties here\r\n    return (\r\n      <div className=\"field\">\r\n        <label />\r\n        <input {...input} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        {/* The field component does not know anything to render, you need to help it using 'component' property */}\r\n        <Field name=\"title\" component={this.renderInput} />\r\n        <Field name=\"description\" component={this.renderInput} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n//instead of connect, we use reduxForm, this will add all the form functions into our props\r\nexport default reduxForm({\r\n  // you're gonna name your form here\r\n  form: \"streamCreate\"\r\n})(StreamCreate);\r\n"]},"metadata":{},"sourceType":"module"}