{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\src\\\\Component\\\\Streams\\\\StreamCreate.js\";\nimport React from \"react\"; // let's get a component and a function from the redux-form library\n// bear in mind that Field is a component and that's why it starts with capital\n// whereas reduxForm is just a function, we will use.\n\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = \"field \".concat(meta.error && meta.touched ? \"error\" : \"\"); // we take out all the input properties here\n\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \" \", label, \" \"), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  // we destruct error and touched from meta object, and gloriously handle error in this function\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, error));\n    }\n  } // Field component captures and returns component\n\n\n  render() {\n    return React.createElement(\"form\", {\n      // handleSubmit is an internal function of redux form that automaticall calls preventDefault and helps with form submitting\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n} // this is where we validate the form, again by getting the data that redux-form collects for us\n\n\nconst validate = formValues => {\n  // creating and object and populating it with list of errors\n  const error = {};\n\n  if (!formValues.title) {\n    error.title = \"You must enter a title\";\n  } // redux will check the name of the Field and then check the errors object, if the Field has the same name as the errors object prop,\n  // then redux form will take that error message and will pass it to our renderInput function, or input generator function\n\n\n  if (!formValues.description) {\n    error.description = \"you must enter a description\";\n  }\n\n  return error;\n}; //instead of connect, we use reduxForm, this will add all the form functions into our props\n\n\nconst formWrapped = reduxForm({\n  // you're gonna name your form here\n  form: \"streamCreate\",\n  // this is how we add validation function to redux-form\n  validate: validate\n})(StreamCreate);\nexport default connect(null, // map DispatchtoProps\ncreateStream)(formWrapped);","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\Component\\Streams\\StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","render","handleSubmit","validate","title","description","formWrapped","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAazCC,WAbyC,GAa3B,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACxC,YAAMC,SAAS,mBAAYD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAnD,CAAf,CADwC,CAExC;;AACA,aACE;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAASF,KAAT,MADF,EAEE,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAKG,KAAKM,WAAL,CAAiBJ,IAAjB,CALH,CADF;AASD,KAzBwC;;AAAA,SA4BzCK,QA5ByC,GA4B9BC,UAAU,IAAI;AACvB,WAAKC,KAAL,CAAWb,YAAX,CAAwBY,UAAxB;AACD,KA9BwC;AAAA;;AACzC;AACAF,EAAAA,WAAW,CAAC;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqB;AAC9B,QAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,aACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADF,CADF;AAKD;AACF,GAVwC,CAYzC;;;AAoBAM,EAAAA,MAAM,GAAG;AACP,WACE;AACE;AACA,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,YAAX,CAAwB,KAAKJ,QAA7B,CAFZ;AAGE,MAAA,SAAS,EAAC,eAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,MAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAOE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,MAAA,KAAK,EAAC,mBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAYE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF,CADF;AAgBD;;AAjDwC,C,CAoD3C;;;AACA,MAAMa,QAAQ,GAAGJ,UAAU,IAAI;AAC7B;AACA,QAAMJ,KAAK,GAAG,EAAd;;AACA,MAAI,CAACI,UAAU,CAACK,KAAhB,EAAuB;AACrBT,IAAAA,KAAK,CAACS,KAAN,GAAc,wBAAd;AACD,GAL4B,CAM7B;AACA;;;AACA,MAAI,CAACL,UAAU,CAACM,WAAhB,EAA6B;AAC3BV,IAAAA,KAAK,CAACU,WAAN,GAAoB,8BAApB;AACD;;AACD,SAAOV,KAAP;AACD,CAZD,C,CAcA;;;AACA,MAAMW,WAAW,GAAGrB,SAAS,CAAC;AAC5B;AACAsB,EAAAA,IAAI,EAAE,cAFsB;AAG5B;AACAJ,EAAAA,QAAQ,EAAEA;AAJkB,CAAD,CAAT,CAKjBf,YALiB,CAApB;AAOA,eAAeF,OAAO,CACpB,IADoB,EAEpB;AACAC,YAHoB,CAAP,CAIbmB,WAJa,CAAf","sourcesContent":["import React from \"react\";\r\n// let's get a component and a function from the redux-form library\r\n// bear in mind that Field is a component and that's why it starts with capital\r\n// whereas reduxForm is just a function, we will use.\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStream } from \"../../actions\";\r\n\r\nclass StreamCreate extends React.Component {\r\n  // we destruct error and touched from meta object, and gloriously handle error in this function\r\n  renderError({ error, touched }) {\r\n    if (touched && error) {\r\n      return (\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  // Field component captures and returns component\r\n  renderInput = ({ input, label, meta }) => {\r\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\r\n    // we take out all the input properties here\r\n    return (\r\n      <div className={className}>\r\n        <label> {label} </label>\r\n        <input {...input} autoComplete=\"off\" />\r\n        {/* the error propety comes from the meta object. the error property is previously populated by the validate function, \r\n        and has been fed to redux-form */}\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // we don't call events here! in redux Form, we just pass in form Values\r\n  onSubmit = formValues => {\r\n    this.props.createStream(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n        // handleSubmit is an internal function of redux form that automaticall calls preventDefault and helps with form submitting\r\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n        className=\"ui form error\"\r\n      >\r\n        {/* The field component does not know anything to render, you need to help it using 'component' property */}\r\n        <Field name=\"title\" component={this.renderInput} label=\"Enter title\" />\r\n        <Field\r\n          name=\"description\"\r\n          component={this.renderInput}\r\n          label=\"Enter description\"\r\n        />\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n// this is where we validate the form, again by getting the data that redux-form collects for us\r\nconst validate = formValues => {\r\n  // creating and object and populating it with list of errors\r\n  const error = {};\r\n  if (!formValues.title) {\r\n    error.title = \"You must enter a title\";\r\n  }\r\n  // redux will check the name of the Field and then check the errors object, if the Field has the same name as the errors object prop,\r\n  // then redux form will take that error message and will pass it to our renderInput function, or input generator function\r\n  if (!formValues.description) {\r\n    error.description = \"you must enter a description\";\r\n  }\r\n  return error;\r\n};\r\n\r\n//instead of connect, we use reduxForm, this will add all the form functions into our props\r\nconst formWrapped = reduxForm({\r\n  // you're gonna name your form here\r\n  form: \"streamCreate\",\r\n  // this is how we add validation function to redux-form\r\n  validate: validate\r\n})(StreamCreate);\r\n\r\nexport default connect(\r\n  null,\r\n  // map DispatchtoProps\r\n  createStream\r\n)(formWrapped);\r\n"]},"metadata":{},"sourceType":"module"}