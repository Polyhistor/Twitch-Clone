{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\src\\\\Component\\\\Streams\\\\StreamDelete.js\";\nimport React from \"react\";\nimport Modal from \"../Modal\";\nimport history from \"../../history\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { fetchStream, deleteStream } from \"../../actions\";\n\nclass StreamDelete extends React.Component {\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n  } // if you ever wondered how we can pass JSX as props down the chain, this is the way! create a varibale, assign your JSX,\n  // and call it to the prop\n\n\n  renderActions() {\n    const id = this.props.match.params.id;\n    return (// in order to get around the need of REACT for enclosing parent divs which may break our UI, we make user of the\n      // magical fragments. Not onl Fragments are invisible, but they let us have siblings elements together without any\n      // broken UI. Tadaaa :)\n      React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.props.deleteStream(this.props.match.params.id),\n        className: \"ui button negative\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"Delete\"), React.createElement(Link, {\n        to: \"/\",\n        className: \"ui button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Cancel\"))\n    );\n  } // our helper method to produce text for the modal, this will also make sure that it only shows contents when they are loaded\n\n\n  renderContent() {\n    if (!this.props.stream) {\n      return \"Are you sure you want to delete this stream ?\";\n    }\n\n    return \"Are you sure you want to delete this stream with the title: \".concat(this.props.stream.title);\n  }\n\n  render() {\n    return React.createElement(Modal // in order to make our Modal reuseable, we are passing the elements as props from parent to child\n    , {\n      title: \"Delete Stream\",\n      content: this.renderContent(),\n      actions: this.renderActions(),\n      onDismiss: () => history.push(\"/\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  }\n\n} // again, if you ever wanted to use props from the component, you can add the second parameter OwnProps to MapStateToProps\n\n\nconst mapStateToProps = (state, ownProps) => {\n  // and instead of this.props, put int ownProps\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  deleteStream\n})(StreamDelete);","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\Component\\Streams\\StreamDelete.js"],"names":["React","Modal","history","Link","connect","fetchStream","deleteStream","StreamDelete","Component","componentDidMount","props","match","params","id","renderActions","renderContent","stream","title","render","push","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,eAA1C;;AAEA,MAAMC,YAAN,SAA2BP,KAAK,CAACQ,SAAjC,CAA2C;AACzCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWL,WAAX,CAAuB,KAAKK,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACD,GAHwC,CAIzC;AACA;;;AACAC,EAAAA,aAAa,GAAG;AACd,UAAMD,EAAE,GAAG,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAAnC;AACA,WACE;AACA;AACA;AACA,0BAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,OAAO,EAAE,MAAM,KAAKH,KAAL,CAAWJ,YAAX,CAAwB,KAAKI,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAAhD,CADjB;AAEE,QAAA,SAAS,EAAC,oBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAOE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAa,QAAA,SAAS,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAJF;AAgBD,GAxBwC,CA0BzC;;;AACAE,EAAAA,aAAa,GAAG;AACd,QAAI,CAAC,KAAKL,KAAL,CAAWM,MAAhB,EAAwB;AACtB,aAAO,+CAAP;AACD;;AACD,iFACE,KAAKN,KAAL,CAAWM,MAAX,CAAkBC,KADpB;AAGD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD,CACE;AADF;AAEE,MAAA,KAAK,EAAC,eAFR;AAGE,MAAA,OAAO,EAAE,KAAKH,aAAL,EAHX;AAIE,MAAA,OAAO,EAAE,KAAKD,aAAL,EAJX;AAKE,MAAA,SAAS,EAAE,MAAMZ,OAAO,CAACiB,IAAR,CAAa,GAAb,CALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD;;AA9CwC,C,CAiD3C;;;AACA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C;AACA,SAAO;AAAEN,IAAAA,MAAM,EAAEK,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACX,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACD,CAHD;;AAKA,eAAeT,OAAO,CACpBgB,eADoB,EAEpB;AAAEf,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAFoB,CAAP,CAGbC,YAHa,CAAf","sourcesContent":["import React from \"react\";\r\nimport Modal from \"../Modal\";\r\nimport history from \"../../history\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStream, deleteStream } from \"../../actions\";\r\n\r\nclass StreamDelete extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchStream(this.props.match.params.id);\r\n  }\r\n  // if you ever wondered how we can pass JSX as props down the chain, this is the way! create a varibale, assign your JSX,\r\n  // and call it to the prop\r\n  renderActions() {\r\n    const id = this.props.match.params.id;\r\n    return (\r\n      // in order to get around the need of REACT for enclosing parent divs which may break our UI, we make user of the\r\n      // magical fragments. Not onl Fragments are invisible, but they let us have siblings elements together without any\r\n      // broken UI. Tadaaa :)\r\n      <React.Fragment>\r\n        <button\r\n          onClick={() => this.props.deleteStream(this.props.match.params.id)}\r\n          className=\"ui button negative\"\r\n        >\r\n          Delete\r\n        </button>\r\n        <Link to=\"/\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  // our helper method to produce text for the modal, this will also make sure that it only shows contents when they are loaded\r\n  renderContent() {\r\n    if (!this.props.stream) {\r\n      return \"Are you sure you want to delete this stream ?\";\r\n    }\r\n    return `Are you sure you want to delete this stream with the title: ${\r\n      this.props.stream.title\r\n    }`;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal\r\n        // in order to make our Modal reuseable, we are passing the elements as props from parent to child\r\n        title=\"Delete Stream\"\r\n        content={this.renderContent()}\r\n        actions={this.renderActions()}\r\n        onDismiss={() => history.push(\"/\")}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n// again, if you ever wanted to use props from the component, you can add the second parameter OwnProps to MapStateToProps\r\nconst mapStateToProps = (state, ownProps) => {\r\n  // and instead of this.props, put int ownProps\r\n  return { stream: state.streams[ownProps.match.params.id] };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchStream, deleteStream }\r\n)(StreamDelete);\r\n"]},"metadata":{},"sourceType":"module"}