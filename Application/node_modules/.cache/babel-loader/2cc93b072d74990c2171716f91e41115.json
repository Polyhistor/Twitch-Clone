{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\src\\\\Component\\\\Streams\\\\StreamCreate.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStream } from \"../../actions\";\nimport StreamForm from \"./StreamForm\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Create a Stream\"), React.createElement(StreamForm, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }));\n  }\n\n} // this is where we validate the form, again by getting the data that redux-form collects for us\n\n\nconst validate = formValues => {\n  // creating and object and populating it with list of errors\n  const error = {};\n\n  if (!formValues.title) {\n    error.title = \"You must enter a title\";\n  } // redux will check the name of the Field and then check the errors object, if the Field has the same name as the errors object prop,\n  // then redux form will take that error message and will pass it to our renderInput function, or input generator function\n\n\n  if (!formValues.description) {\n    error.description = \"you must enter a description\";\n  }\n\n  return error;\n}; //instead of connect, we use reduxForm, this will add all the form functions into our props\n\n\nconst formWrapped = reduxForm({\n  // you're gonna name your form here\n  form: \"streamCreate\",\n  // this is how we add validation function to redux-form\n  validate: validate\n})(StreamCreate);\nexport default connect(null, // map DispatchtoProps\n{\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\Component\\Streams\\StreamCreate.js"],"names":["React","connect","createStream","StreamForm","StreamCreate","Component","onSubmit","formValues","props","render","validate","error","title","description","formWrapped","reduxForm","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAEzCC,QAFyC,GAE9BC,UAAU,IAAI;AACvB,WAAKC,KAAL,CAAWN,YAAX,CAAwBK,UAAxB;AACD,KAJwC;AAAA;;AAMzCE,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAE,KAAKH,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAbwC,C,CAgB3C;;;AACA,MAAMI,QAAQ,GAAGH,UAAU,IAAI;AAC7B;AACA,QAAMI,KAAK,GAAG,EAAd;;AACA,MAAI,CAACJ,UAAU,CAACK,KAAhB,EAAuB;AACrBD,IAAAA,KAAK,CAACC,KAAN,GAAc,wBAAd;AACD,GAL4B,CAM7B;AACA;;;AACA,MAAI,CAACL,UAAU,CAACM,WAAhB,EAA6B;AAC3BF,IAAAA,KAAK,CAACE,WAAN,GAAoB,8BAApB;AACD;;AACD,SAAOF,KAAP;AACD,CAZD,C,CAcA;;;AACA,MAAMG,WAAW,GAAGC,SAAS,CAAC;AAC5B;AACAC,EAAAA,IAAI,EAAE,cAFsB;AAG5B;AACAN,EAAAA,QAAQ,EAAEA;AAJkB,CAAD,CAAT,CAKjBN,YALiB,CAApB;AAOA,eAAeH,OAAO,CACpB,IADoB,EAEpB;AACA;AAAEC,EAAAA;AAAF,CAHoB,CAAP,CAIbY,WAJa,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStream } from \"../../actions\";\r\nimport StreamForm from \"./StreamForm\";\r\n\r\nclass StreamCreate extends React.Component {\r\n  // we don't call events here! in redux Form, we just pass in form Values\r\n  onSubmit = formValues => {\r\n    this.props.createStream(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Create a Stream</h3>\r\n        <StreamForm onSubmit={this.onSubmit} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// this is where we validate the form, again by getting the data that redux-form collects for us\r\nconst validate = formValues => {\r\n  // creating and object and populating it with list of errors\r\n  const error = {};\r\n  if (!formValues.title) {\r\n    error.title = \"You must enter a title\";\r\n  }\r\n  // redux will check the name of the Field and then check the errors object, if the Field has the same name as the errors object prop,\r\n  // then redux form will take that error message and will pass it to our renderInput function, or input generator function\r\n  if (!formValues.description) {\r\n    error.description = \"you must enter a description\";\r\n  }\r\n  return error;\r\n};\r\n\r\n//instead of connect, we use reduxForm, this will add all the form functions into our props\r\nconst formWrapped = reduxForm({\r\n  // you're gonna name your form here\r\n  form: \"streamCreate\",\r\n  // this is how we add validation function to redux-form\r\n  validate: validate\r\n})(StreamCreate);\r\n\r\nexport default connect(\r\n  null,\r\n  // map DispatchtoProps\r\n  { createStream }\r\n)(formWrapped);\r\n"]},"metadata":{},"sourceType":"module"}