{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\src\\\\Component\\\\Streams\\\\StreamEdit.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStream, editStream } from \"../../actions\";\nimport StreamForm from \"./StreamForm\"; // It is essential to consider that we do make user of two major context in this component in order\n// to select user's id and match against our store. Redux keeps the ID of the users in the state, and the\n// Router library that we have installed earlier, keeps track of the variable ID that user clicked on.\n// then we can extract that ID from the props created by Router library, and then match it agasint the recrod\n// in our state, and do the magic :)\n\nclass StreamEdit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      console.log(formValues);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n  }\n\n  render() {\n    // the first time render occurs, we still don't have the stream! so make sure, that you do this check or\n    // else you will have the can't get title of undefined error. Just follow my lead my child and you will\n    // be a great JS coder...\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"Edit a stream\"), React.createElement(StreamForm // #1 - the first set of paranthesis is to let JSX engine knows that we are doing javascript, the second is for creating an object\n    // #2 - secondly, the object keys that we choose are the ones that we have chosen for our Form component Name attributes\n    // once we set some initialValues, reduxForm will automatically check these keys against the Field names. Tricky, isn't it?\n    , {\n      initialValues: {\n        title: \"EDIT ME\",\n        description: \"CHANGE ME TOO\"\n      },\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }));\n  }\n\n} // the trick is that, you can always have a second argument in mapStateToProps called 'ownProps' that will call\n// the props from your component, this way you can get the data from the props and check it agains your data in the store.\n\n\nconst mapStateToProps = (state, ownProps) => {\n  // this will select the appropriate stream\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  editStream\n})(StreamEdit);","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\Component\\Streams\\StreamEdit.js"],"names":["React","connect","fetchStream","editStream","StreamForm","StreamEdit","Component","onSubmit","formValues","console","log","componentDidMount","props","match","params","id","render","stream","title","description","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAKvCC,QALuC,GAK5BC,UAAU,IAAI;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACD,KAPsC;AAAA;;AACvCG,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWV,WAAX,CAAuB,KAAKU,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACD;;AAMDC,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA,QAAI,CAAC,KAAKJ,KAAL,CAAWK,MAAhB,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAIE,oBAAC,UAAD,CACE;AACA;AACA;AAHF;AAIE,MAAA,aAAa,EAAE;AAAEC,QAAAA,KAAK,EAAE,SAAT;AAAoBC,QAAAA,WAAW,EAAE;AAAjC,OAJjB;AAKE,MAAA,QAAQ,EAAE,KAAKZ,QALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AAcD;;AA9BsC,C,CAiCzC;AACA;;;AACA,MAAMa,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C;AACA,SAAO;AAAEL,IAAAA,MAAM,EAAEI,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACT,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACD,CAHD;;AAKA,eAAed,OAAO,CACpBmB,eADoB,EAEpB;AAAElB,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAFoB,CAAP,CAGbE,UAHa,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStream, editStream } from \"../../actions\";\r\nimport StreamForm from \"./StreamForm\";\r\n// It is essential to consider that we do make user of two major context in this component in order\r\n// to select user's id and match against our store. Redux keeps the ID of the users in the state, and the\r\n// Router library that we have installed earlier, keeps track of the variable ID that user clicked on.\r\n// then we can extract that ID from the props created by Router library, and then match it agasint the recrod\r\n// in our state, and do the magic :)\r\n\r\nclass StreamEdit extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchStream(this.props.match.params.id);\r\n  }\r\n\r\n  onSubmit = formValues => {\r\n    console.log(formValues);\r\n  };\r\n\r\n  render() {\r\n    // the first time render occurs, we still don't have the stream! so make sure, that you do this check or\r\n    // else you will have the can't get title of undefined error. Just follow my lead my child and you will\r\n    // be a great JS coder...\r\n    if (!this.props.stream) {\r\n      return <div>Loading...</div>;\r\n    }\r\n    return (\r\n      <div>\r\n        <h3>Edit a stream</h3>\r\n        {/* // bear in mind that initialValues is a very special property name inherently defined in ReduxForm, we can \r\n        // make use of it in order to set our initial values */}\r\n        <StreamForm\r\n          // #1 - the first set of paranthesis is to let JSX engine knows that we are doing javascript, the second is for creating an object\r\n          // #2 - secondly, the object keys that we choose are the ones that we have chosen for our Form component Name attributes\r\n          // once we set some initialValues, reduxForm will automatically check these keys against the Field names. Tricky, isn't it?\r\n          initialValues={{ title: \"EDIT ME\", description: \"CHANGE ME TOO\" }}\r\n          onSubmit={this.onSubmit}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// the trick is that, you can always have a second argument in mapStateToProps called 'ownProps' that will call\r\n// the props from your component, this way you can get the data from the props and check it agains your data in the store.\r\nconst mapStateToProps = (state, ownProps) => {\r\n  // this will select the appropriate stream\r\n  return { stream: state.streams[ownProps.match.params.id] };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchStream, editStream }\r\n)(StreamEdit);\r\n"]},"metadata":{},"sourceType":"module"}