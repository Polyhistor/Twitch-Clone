{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pataei\\\\Desktop\\\\Twitch-Clone\\\\Client\\\\src\\\\Component\\\\Streams\\\\StreamEdit.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\"; // It is essential to consider that we do make user of two major context in this component in order\n// to select user's id and match against our store. Redux keeps the ID of the users in the state, and the\n// Router library that we have installed earlier, keeps track of the variable ID that user clicked on.\n// then we can extract that ID from the props created by Router library, and then match it agasint the recrod\n// in our state, and do the magic :)\n\nconst StreamEdit = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \" Stream Edit \");\n}; // the trick is that, you can always have a second argument in mapStateToProps called 'ownProps' that will call\n// the props from your component, this way you can get the data from the props and check it agains your data in the store.\n\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: null\n  };\n};\n\nexport default connect(mapStateToProps)(StreamEdit);","map":{"version":3,"sources":["C:\\Users\\pataei\\Desktop\\Twitch-Clone\\Client\\src\\Component\\Streams\\StreamEdit.js"],"names":["React","connect","StreamEdit","props","mapStateToProps","state","ownProps","stream"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAC1B,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACD,CAFD,C,CAIA;AACA;;;AACA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAP;AACD,CAFD;;AAIA,eAAeN,OAAO,CAACG,eAAD,CAAP,CAAyBF,UAAzB,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// It is essential to consider that we do make user of two major context in this component in order\r\n// to select user's id and match against our store. Redux keeps the ID of the users in the state, and the\r\n// Router library that we have installed earlier, keeps track of the variable ID that user clicked on.\r\n// then we can extract that ID from the props created by Router library, and then match it agasint the recrod\r\n// in our state, and do the magic :)\r\n\r\nconst StreamEdit = props => {\r\n  return <div> Stream Edit </div>;\r\n};\r\n\r\n// the trick is that, you can always have a second argument in mapStateToProps called 'ownProps' that will call\r\n// the props from your component, this way you can get the data from the props and check it agains your data in the store.\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { stream: null };\r\n};\r\n\r\nexport default connect(mapStateToProps)(StreamEdit);\r\n"]},"metadata":{},"sourceType":"module"}